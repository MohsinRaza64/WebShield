import os
import sys

parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(parent_dir)

import hashlib
import pathlib
import platform
import time
from datetime import datetime
from misp.misp import get_sha256_hashes
from utils.file_handler import append_to_file

import yara

def is_file_malicious(yara_rules_dir: str, file_to_scan: str) -> bool:

    yara_rules_files = [os.path.join(yara_rules_dir, f) for f in os.listdir(yara_rules_dir) if f.endswith('.yar')]   
    external_variables = {"filepath": file_to_scan}    

    for rule_file in yara_rules_files:
        try:
            rules = yara.compile(filepath=rule_file)            
            matches = rules.match(filepath=file_to_scan, externals=external_variables)         
            if matches:
                print(f"Malicious content detected by {rule_file}")
                return True        

        except yara.Error as e:
            print(f"Error in {rule_file}: {e}")
            continue

    return False

def calculate_file_hash(file_path):
    hash_sha256 = hashlib.sha256()
    with open(file_path, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_sha256.update(chunk)
    return hash_sha256.hexdigest()

def get_hashes_from_blacklist(blacklist_file):
    with open(blacklist_file, 'r') as f:
        return {line.strip() for line in f if line.strip()}

def get_download_folder():
    home = str(pathlib.Path.home())
    if platform.system() in ["Windows", "Darwin", "Linux"]:
        return os.path.join(home, "Downloads")
    else:
        raise Exception("Unsupported operating system")

def process_files(download_directory, blacklist_file, last_scan_time):
    blacklist_hashes = get_hashes_from_blacklist(blacklist_file)
    blacklist_hashes = get_sha256_hashes()

    for root, dirs, files in os.walk(download_directory):
        for file in files:
            file_path = os.path.join(root, file)

            try:
                mtime = os.path.getmtime(file_path)

                if mtime > last_scan_time:
                    
                    file_hash = calculate_file_hash(file_path)

                    if file_hash in blacklist_hashes:
                        print(f"Deleting file: {file_path} (Hash: {file_hash})")
                        os.remove(file_path)  
                        append_to_file('history/deleted_files.txt', file_path)
                    else:
                        if is_file_malicious("yara", file_path):
                            print(f"Deleting file: {file_path} (Hash: {file_hash})")
                            os.remove(file_path)  
                            append_to_file('history/deleted_files.txt', file_path)
                        else:
                            print(f"File processed and found safe: {file_path} (Hash: {file_hash})")
                            append_to_file('history/downloaded_files.txt', file_path)
            except Exception as e:
                print(f"Error processing file {file_path}: {e}")

def start_file_processor():
    download_directory = get_download_folder()  
    blacklist_file = "tests/blacklist.txt" 
    last_scan_time = time.time()

    print(f"Monitoring Download folder: {download_directory}")

    while True:
        process_files(download_directory, blacklist_file, last_scan_time)
        last_scan_time = time.time() 
        time.sleep(10)

if __name__ == "__main__":
    start_file_processor()